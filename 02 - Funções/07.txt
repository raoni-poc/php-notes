Analisando o código a seguir, qual linha deve ser alterada para que a saída seja 2:

class A {
    protected $x = array(); /* Linha A */
    public function getX() { /* Linha B */
        return $this->x; /* Linha C */
    }
}
$a = new A(); /* Linha D */
array_push( $a->getX(), "one");
array_push( $a->getX(), "two");
echo count( $a->getX());

A: Não será necessário substituir linha alguma. O código como está já mostra o valor 2
B: Linha A, para: protected &$x = array();
C: Linha B, para: public function &getX() {
D: Linha C, para: return &$this->x;
E: Linha D, para: $a =& new A();















































R.: C

Segundo a documentação oficial, especificação da função array_push()
prevê: array_push (array &$ array , mixed $ value1 [, mixed $... ] ).

Significa que a função array_push() adiciona os elementos one e two ao final do array,
desde que $a->getX() seja passado por referência para a função.

O método getX() da classe A, na forma como está, devolve a cópia do array $x provocando erro.
Portanto a alternativa A já pode ser descartada.

A dúvida é onde atribuir & para que ele atenda a especificação da função array_push().

Tanto a alternativa B, D e E geram erro de sintaxe.
A forma correta, para que a passagem por referência se efetive, é public function &getX() {
então alternativa correta é C.
